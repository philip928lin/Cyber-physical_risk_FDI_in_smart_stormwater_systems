import numpy as np
from scipy import interpolate
# from scipy.stats import lognorm, norm
# Bethlehem DDF (Depth Duration Frequency) got from NOAA Atlas 14 Volume 2 Version 3.
# Unit cm  
# Format: [Duration, Return period] 
ddf = np.array([[ 0.8128 ,  0.9652 ,  1.13792,  1.26746,  1.43002,  1.5494 ,
                 1.67386,  1.79578,  1.9558 ,  2.08788],
               [ 1.29794,  1.54432,  1.82372,  2.02692,  2.27838,  2.46888,
                 2.667  ,  2.8448 ,  3.0988 ,  3.2766 ],
               [ 1.62052,  1.9431 ,  2.30632,  2.5654 ,  2.8956 ,  3.1242 ,
                 3.3528 ,  3.5814 ,  3.8862 ,  4.1402 ],
               [ 2.2225 ,  2.6924 ,  3.2766 ,  3.7084 ,  4.2672 ,  4.699  ,
                 5.1562 ,  5.588  ,  6.1976 ,  6.6802 ],
               [ 2.7686 ,  3.3782 ,  4.191  ,  4.8514 ,  5.6896 ,  6.3754 ,
                 7.0866 ,  7.8486 ,  8.89   ,  9.7536 ],
               [ 3.3274 ,  4.0132 ,  5.0546 ,  5.842  ,  6.985  ,  7.9248 ,
                 8.9408 , 10.033  , 11.6586 , 13.0048 ],
               [ 3.6576 ,  4.445  ,  5.5372 ,  6.4008 ,  7.62   ,  8.636  ,
                 9.7282 , 10.8966 , 12.6238 , 14.0462 ],
               [ 4.6482 ,  5.588  ,  6.9088 ,  8.0264 ,  9.6266 , 10.9728 ,
                12.4714 , 14.1224 , 16.5608 , 18.6436 ],
               [ 5.715  ,  6.8834 ,  8.5598 , 10.0076 , 12.1158 , 13.9446 ,
                16.002  , 18.288  , 21.7678 , 24.765  ],
               [ 6.6802 ,  8.0264 , 10.0584 , 11.7348 , 14.1986 , 16.2814 ,
                18.542  , 21.0058 , 24.6634 , 27.686  ],
               [ 7.8232 ,  9.4234 , 11.811  , 13.7414 , 16.5354 , 18.8468 ,
                21.3614 , 24.0538 , 27.94   , 31.242  ],
               [ 8.2296 ,  9.9314 , 12.3952 , 14.4018 , 17.2974 , 19.7104 ,
                22.3012 , 25.0952 , 29.21   , 32.512  ],
               [ 8.6614 , 10.414  , 12.9794 , 15.0622 , 18.0848 , 20.574  ,
                23.241  , 26.162  , 30.226  , 33.782  ],
               [10.1854 , 12.2174 , 15.0622 , 17.399  , 20.7772 , 23.5966 ,
                26.67   , 29.972  , 34.544  , 38.354  ],
               [11.7348 , 13.9954 , 17.018  , 19.4818 , 22.9108 , 25.654  ,
                28.702  , 31.75   , 36.068  , 39.624  ],
               [15.7734 , 18.7198 , 22.2504 , 25.0698 , 28.956  , 32.004  ,
                35.052  , 38.1    , 42.672  , 45.974  ],
               [19.7358 , 23.241  , 27.178  , 29.972  , 34.036  , 37.084  ,
                40.132  , 42.926  , 46.99   , 50.038  ],
               [25.019  , 29.464  , 33.782  , 36.83   , 41.148  , 44.45   ,
                47.244  , 50.292  , 54.102  , 56.642  ],
               [29.972  , 35.052  , 40.132  , 43.688  , 48.26   , 51.816  ,
                55.118  , 58.166  , 61.976  , 64.77   ]])

return_year = [1, 2, 5, 10, 25, 50, 100, 200, 500, 1000]
duration = ['5-min', '10-min', '15-min', '30-min', '60-min', '2-hr', '3-hr',
            '6-hr', '12-hr', '24-hr', '2-day', '3-day', '4-day', '7-day',
            '10-day', '20-day', '30-day', '45-day', '60-day']

# Standard 24-hour NRCS rainfall distributions with interval = 6mins = 0.1hr
type1 = np.array(
    [0.     , 0.00174, 0.00348, 0.00522, 0.00697, 0.00871, 0.01046,
     0.0122 , 0.01395, 0.0157 , 0.01745, 0.0192 , 0.02095, 0.0227 ,
     0.02446, 0.02621, 0.02797, 0.02972, 0.03148, 0.03324, 0.035  ,
     0.03677, 0.03858, 0.04041, 0.04227, 0.04416, 0.04608, 0.04803,
     0.05001, 0.05201, 0.05405, 0.05611, 0.05821, 0.06033, 0.06248,
     0.06466, 0.06687, 0.06911, 0.07138, 0.07367, 0.076  , 0.07835,
     0.0807 , 0.08307, 0.08545, 0.08784, 0.09024, 0.09265, 0.09507,
     0.09751, 0.09995, 0.10241, 0.10487, 0.10735, 0.10984, 0.11234,
     0.11485, 0.11737, 0.1199 , 0.12245, 0.125  , 0.12761, 0.13034,
     0.13317, 0.1361 , 0.13915, 0.1423 , 0.14557, 0.14894, 0.15241,
     0.156  , 0.15966, 0.16334, 0.16706, 0.17082, 0.1746 , 0.17842,
     0.18226, 0.18614, 0.19006, 0.194  , 0.19817, 0.20275, 0.20775,
     0.21317, 0.219  , 0.22523, 0.23185, 0.23885, 0.24623, 0.254  ,
     0.26233, 0.27139, 0.28119, 0.29173, 0.303  , 0.31942, 0.34542,
     0.38784, 0.46316, 0.515  , 0.5322 , 0.5476 , 0.5612 , 0.573  ,
     0.583  , 0.59188, 0.60032, 0.60832, 0.61588, 0.623  , 0.62982,
     0.63648, 0.64298, 0.64932, 0.6555 , 0.66152, 0.66738, 0.67308,
     0.67862, 0.684  , 0.68925, 0.6944 , 0.69945, 0.7044 , 0.70925,
     0.714  , 0.71865, 0.7232 , 0.72765, 0.732  , 0.73625, 0.7404 ,
     0.74445, 0.7484 , 0.75225, 0.756  , 0.75965, 0.7632 , 0.76665,
     0.77   , 0.77329, 0.77656, 0.77981, 0.78304, 0.78625, 0.78944,
     0.79261, 0.79576, 0.79889, 0.802  , 0.80509, 0.80816, 0.81121,
     0.81424, 0.81725, 0.82024, 0.82321, 0.82616, 0.82909, 0.832  ,
     0.83489, 0.83776, 0.84061, 0.84344, 0.84625, 0.84904, 0.85181,
     0.85456, 0.85729, 0.86   , 0.86269, 0.86536, 0.86801, 0.87064,
     0.87325, 0.87584, 0.87841, 0.88096, 0.88349, 0.886  , 0.88849,
     0.89096, 0.89341, 0.89584, 0.89825, 0.90064, 0.90301, 0.90536,
     0.90769, 0.91   , 0.91229, 0.91456, 0.91681, 0.91904, 0.92125,
     0.92344, 0.92561, 0.92776, 0.92989, 0.932  , 0.93409, 0.93616,
     0.93821, 0.94024, 0.94225, 0.94424, 0.94621, 0.94816, 0.95009,
     0.952  , 0.95389, 0.95576, 0.95761, 0.95944, 0.96125, 0.96304,
     0.96481, 0.96656, 0.96829, 0.97   , 0.97169, 0.97336, 0.97501,
     0.97664, 0.97825, 0.97984, 0.98141, 0.98296, 0.98449, 0.986  ,
     0.98749, 0.98896, 0.99041, 0.99184, 0.99325, 0.99464, 0.99601,
     0.99736, 0.99869, 1.     ])
type1a = np.array(
    [0.     , 0.00224, 0.00432, 0.00628, 0.00816, 0.01   , 0.01184,
     0.01372, 0.01568, 0.01776, 0.02   , 0.02276, 0.02568, 0.02872,
     0.03184, 0.035  , 0.03797, 0.04095, 0.04394, 0.04695, 0.05   ,
     0.05315, 0.05633, 0.05954, 0.06276, 0.066  , 0.0692 , 0.0724 ,
     0.0756 , 0.0788 , 0.082  , 0.08514, 0.08829, 0.09147, 0.09471,
     0.098  , 0.10147, 0.10502, 0.10862, 0.11229, 0.116  , 0.11969,
     0.12342, 0.12721, 0.13107, 0.135  , 0.13901, 0.1431 , 0.14729,
     0.15159, 0.156  , 0.16059, 0.1653 , 0.17011, 0.17501, 0.18   ,
     0.18494, 0.18999, 0.19517, 0.20049, 0.206  , 0.21196, 0.21808,
     0.22432, 0.23064, 0.237  , 0.24285, 0.24878, 0.2549 , 0.26127,
     0.268  , 0.27517, 0.28287, 0.29118, 0.30019, 0.31   , 0.33142,
     0.35469, 0.37876, 0.40255, 0.425  , 0.43936, 0.45168, 0.46232,
     0.47164, 0.48   , 0.48904, 0.49752, 0.50548, 0.51296, 0.52   ,
     0.52664, 0.53292, 0.53888, 0.54456, 0.55   , 0.55564, 0.56116,
     0.56656, 0.57184, 0.577  , 0.58198, 0.58685, 0.59163, 0.59635,
     0.601  , 0.60576, 0.61044, 0.61504, 0.61956, 0.624  , 0.62836,
     0.63264, 0.63684, 0.64096, 0.645  , 0.64889, 0.65272, 0.65651,
     0.66026, 0.664  , 0.66773, 0.67148, 0.67527, 0.6791 , 0.683  ,
     0.68665, 0.69027, 0.69386, 0.69744, 0.701  , 0.70473, 0.70838,
     0.71198, 0.71551, 0.719  , 0.72245, 0.72586, 0.72926, 0.73263,
     0.736  , 0.73939, 0.74277, 0.74613, 0.74948, 0.75281, 0.75613,
     0.75943, 0.76271, 0.76598, 0.76924, 0.77248, 0.77571, 0.77892,
     0.78211, 0.78529, 0.78845, 0.7916 , 0.79474, 0.79786, 0.80096,
     0.80405, 0.80712, 0.81018, 0.81322, 0.81625, 0.81926, 0.82226,
     0.82524, 0.82821, 0.83116, 0.8341 , 0.83702, 0.83992, 0.84281,
     0.84569, 0.84855, 0.8514 , 0.85423, 0.85704, 0.85984, 0.86262,
     0.86539, 0.86815, 0.87089, 0.87361, 0.87632, 0.87901, 0.88169,
     0.88435, 0.887  , 0.88963, 0.89225, 0.89485, 0.89744, 0.90001,
     0.90257, 0.90511, 0.90763, 0.91014, 0.91264, 0.91512, 0.91759,
     0.92004, 0.92247, 0.92489, 0.92729, 0.92968, 0.93206, 0.93442,
     0.93676, 0.93909, 0.9414 , 0.9437 , 0.94598, 0.94825, 0.9505 ,
     0.95274, 0.95496, 0.95717, 0.95936, 0.96154, 0.9637 , 0.96584,
     0.96797, 0.97009, 0.97219, 0.97428, 0.97635, 0.9784 , 0.98044,
     0.98246, 0.98447, 0.98647, 0.98845, 0.99041, 0.99236, 0.99429,
     0.99621, 0.99811, 1.     ])
type2 = np.array(
    [0.     , 0.00101, 0.00202, 0.00305, 0.00408, 0.00513, 0.00618,
     0.00725, 0.00832, 0.00941, 0.0105 , 0.01161, 0.01272, 0.01385,
     0.01498, 0.01613, 0.01728, 0.01845, 0.01962, 0.02081, 0.022  ,
     0.02321, 0.02442, 0.02565, 0.02688, 0.02813, 0.02938, 0.03065,
     0.03192, 0.03321, 0.0345 , 0.03581, 0.03712, 0.03845, 0.03978,
     0.04113, 0.04248, 0.04385, 0.04522, 0.04661, 0.048  , 0.04941,
     0.05084, 0.05229, 0.05376, 0.05525, 0.05676, 0.05829, 0.05984,
     0.06141, 0.063  , 0.06461, 0.06624, 0.06789, 0.06956, 0.07125,
     0.07296, 0.07469, 0.07644, 0.07821, 0.08   , 0.08181, 0.08364,
     0.08549, 0.08736, 0.08925, 0.09116, 0.09309, 0.09504, 0.09701,
     0.099  , 0.10101, 0.10304, 0.10509, 0.10716, 0.10925, 0.11136,
     0.11349, 0.11564, 0.11781, 0.12   , 0.12225, 0.1246 , 0.12705,
     0.1296 , 0.13225, 0.135  , 0.13785, 0.1408 , 0.14385, 0.147  ,
     0.1502 , 0.1534 , 0.1566 , 0.1598 , 0.163  , 0.16628, 0.16972,
     0.17332, 0.17708, 0.181  , 0.18512, 0.18948, 0.19408, 0.19892,
     0.204  , 0.2094 , 0.2152 , 0.2214 , 0.228  , 0.235  , 0.24268,
     0.25132, 0.26092, 0.27148, 0.283  , 0.30684, 0.35436, 0.43079,
     0.56786, 0.663  , 0.68196, 0.69864, 0.71304, 0.72516, 0.735  ,
     0.74344, 0.75136, 0.75876, 0.76564, 0.772  , 0.77796, 0.78364,
     0.78904, 0.79416, 0.799  , 0.8036 , 0.808  , 0.8122 , 0.8162 ,
     0.82   , 0.82367, 0.82726, 0.83079, 0.83424, 0.83763, 0.84094,
     0.84419, 0.84736, 0.85047, 0.8535 , 0.85647, 0.85936, 0.86219,
     0.86494, 0.86763, 0.87024, 0.87279, 0.87526, 0.87767, 0.88   ,
     0.88229, 0.88455, 0.88679, 0.889  , 0.89119, 0.89335, 0.89549,
     0.8976 , 0.89969, 0.90175, 0.90379, 0.9058 , 0.90779, 0.90975,
     0.91169, 0.9136 , 0.91549, 0.91735, 0.91919, 0.921  , 0.92279,
     0.92455, 0.92629, 0.928  , 0.92969, 0.93135, 0.93299, 0.9346 ,
     0.93619, 0.93775, 0.93929, 0.9408 , 0.94229, 0.94375, 0.94519,
     0.9466 , 0.94799, 0.94935, 0.95069, 0.952  , 0.9533 , 0.95459,
     0.95588, 0.95716, 0.95844, 0.95971, 0.96098, 0.96224, 0.9635 ,
     0.96475, 0.966  , 0.96724, 0.96848, 0.96971, 0.97094, 0.97216,
     0.97338, 0.97459, 0.9758 , 0.977  , 0.9782 , 0.97939, 0.98058,
     0.98176, 0.98294, 0.98411, 0.98528, 0.98644, 0.9876 , 0.98875,
     0.9899 , 0.99104, 0.99218, 0.99331, 0.99444, 0.99556, 0.99668,
     0.99779, 0.9989 , 1.     ])
type3 = np.array(
    [0.     , 0.001  , 0.002  , 0.003  , 0.004  , 0.005  , 0.006  ,
     0.007  , 0.008  , 0.009  , 0.01   , 0.011  , 0.012  , 0.013  ,
     0.014  , 0.015  , 0.016  , 0.017  , 0.018  , 0.019  , 0.02   ,
     0.02101, 0.02203, 0.02307, 0.02412, 0.02519, 0.02627, 0.02737,
     0.02848, 0.02961, 0.03075, 0.03191, 0.03308, 0.03427, 0.03547,
     0.03669, 0.03792, 0.03917, 0.04043, 0.04171, 0.043  , 0.04431,
     0.04563, 0.04697, 0.04832, 0.04969, 0.05107, 0.05247, 0.05388,
     0.05531, 0.05675, 0.05821, 0.05968, 0.06117, 0.06267, 0.06419,
     0.06572, 0.06727, 0.06883, 0.07041, 0.072  , 0.07363, 0.0753 ,
     0.07703, 0.0788 , 0.08063, 0.0825 , 0.08443, 0.0864 , 0.08843,
     0.0905 , 0.09263, 0.0948 , 0.09703, 0.0993 , 0.10163, 0.104  ,
     0.10643, 0.1089 , 0.11143, 0.114  , 0.11666, 0.11943, 0.12232,
     0.12532, 0.12844, 0.13167, 0.13502, 0.13848, 0.14206, 0.14575,
     0.14956, 0.15348, 0.15752, 0.16167, 0.16594, 0.17032, 0.17482,
     0.17943, 0.18416, 0.189  , 0.19402, 0.19928, 0.20478, 0.21052,
     0.2165 , 0.22272, 0.22918, 0.23588, 0.24282, 0.25   , 0.25776,
     0.26644, 0.27604, 0.28656, 0.298  , 0.3143 , 0.3394 , 0.3733 ,
     0.416  , 0.5    , 0.584  , 0.6267 , 0.6606 , 0.6857 , 0.702  ,
     0.71344, 0.72396, 0.73356, 0.74224, 0.75   , 0.75718, 0.76412,
     0.77082, 0.77728, 0.7835 , 0.78948, 0.79522, 0.80072, 0.80598,
     0.811  , 0.81584, 0.82057, 0.82518, 0.82968, 0.83406, 0.83833,
     0.84248, 0.84652, 0.85044, 0.85425, 0.85794, 0.86152, 0.86498,
     0.86833, 0.87156, 0.87468, 0.87768, 0.88057, 0.88334, 0.886  ,
     0.88858, 0.8911 , 0.89358, 0.896  , 0.89838, 0.9007 , 0.90298,
     0.9052 , 0.90738, 0.9095 , 0.91158, 0.9136 , 0.91558, 0.9175 ,
     0.91938, 0.9212 , 0.92298, 0.9247 , 0.92638, 0.928  , 0.92959,
     0.93117, 0.93273, 0.93428, 0.93581, 0.93733, 0.93883, 0.94032,
     0.94179, 0.94325, 0.94469, 0.94612, 0.94753, 0.94893, 0.95031,
     0.95168, 0.95303, 0.95437, 0.95569, 0.957  , 0.95829, 0.95958,
     0.96085, 0.96211, 0.96336, 0.9646 , 0.96582, 0.96704, 0.96824,
     0.96944, 0.97062, 0.97179, 0.97295, 0.9741 , 0.97523, 0.97636,
     0.97747, 0.97858, 0.97967, 0.98075, 0.98182, 0.98288, 0.98392,
     0.98496, 0.98598, 0.987  , 0.988  , 0.98899, 0.98997, 0.99094,
     0.99189, 0.99284, 0.99377, 0.9947 , 0.99561, 0.99651, 0.9974 ,
     0.99828, 0.99914, 1.     ])
min_list = np.array(
    [   0,    6,   12,   18,   24,   30,   36,   42,   48,   54,   60,
       66,   72,   78,   84,   90,   96,  102,  108,  114,  120,  126,
      132,  138,  144,  150,  156,  162,  168,  174,  180,  186,  192,
      198,  204,  210,  216,  222,  228,  234,  240,  246,  252,  258,
      264,  270,  276,  282,  288,  294,  300,  306,  312,  318,  324,
      330,  336,  342,  348,  354,  360,  366,  372,  378,  384,  390,
      396,  402,  408,  414,  420,  426,  432,  438,  444,  450,  456,
      462,  468,  474,  480,  486,  492,  498,  504,  510,  516,  522,
      528,  534,  540,  546,  552,  558,  564,  570,  576,  582,  588,
      594,  600,  606,  612,  618,  624,  630,  636,  642,  648,  654,
      660,  666,  672,  678,  684,  690,  696,  702,  708,  714,  720,
      726,  732,  738,  744,  750,  756,  762,  768,  774,  780,  786,
      792,  798,  804,  810,  816,  822,  828,  834,  840,  846,  852,
      858,  864,  870,  876,  882,  888,  894,  900,  906,  912,  918,
      924,  930,  936,  942,  948,  954,  960,  966,  972,  978,  984,
      990,  996, 1002, 1008, 1014, 1020, 1026, 1032, 1038, 1044, 1050,
     1056, 1062, 1068, 1074, 1080, 1086, 1092, 1098, 1104, 1110, 1116,
     1122, 1128, 1134, 1140, 1146, 1152, 1158, 1164, 1170, 1176, 1182,
     1188, 1194, 1200, 1206, 1212, 1218, 1224, 1230, 1236, 1242, 1248,
     1254, 1260, 1266, 1272, 1278, 1284, 1290, 1296, 1302, 1308, 1314,
     1320, 1326, 1332, 1338, 1344, 1350, 1356, 1362, 1368, 1374, 1380,
     1386, 1392, 1398, 1404, 1410, 1416, 1422, 1428, 1434, 1440])



def get_depth_cm(dur, yr):
    """
    Get the depth from the Bethlehem DDF given duration and return period.
    
    DDF is from NOAA Atlas 14 Volume 2 Version 3.

    Parameters
    ----------
    dur : str
        duration = ['5-min', '10-min', '15-min', '30-min', '60-min', '2-hr',
                    '3-hr', '6-hr', '12-hr', '24-hr', '2-day', '3-day',
                    '4-day', '7-day', '10-day', '20-day', '30-day', '45-day',
                    '60-day'].
    yr : int
        return_year = [1, 2, 5, 10, 25, 50, 100, 200, 500, 1000].

    Returns
    -------
    depth_cm : float
        Total depth of given duration in unit cm.

    """
    # Format: [Duration, Return period] 
    depth_cm = ddf[duration.index(dur), return_year.index(yr)]
    return depth_cm

def tranform_scs(dur_hr, storm_type="type2", interpolate_method="linear",
                 interval_mins=5):
    """
    Transform standard storm_type to different duration and sample time
    intervel.

    Parameters
    ----------
    dur_hr : float
        Duration of the storm (hours).
    storm_type : str, optional
        Standard 24-hour NRCS rainfall distributions. ["type1", "type1a",
        "type2", "type3"]. The default is "type2".
    interpolate_method : str, optional
        Specifies the kind of interpolation as a string or as an integer
        specifying the order of the spline interpolator to use. The string has
        to be one of ‘linear’, ‘nearest’, ‘nearest-up’, ‘zero’, ‘slinear’,
        ‘quadratic’, ‘cubic’, ‘previous’, or ‘next’. ‘zero’, ‘slinear’,
        ‘quadratic’ and ‘cubic’ refer to a spline interpolation of zeroth,
        first, second or third order; ‘previous’ and ‘next’ simply return the
        previous or next value of the point; ‘nearest-up’ and ‘nearest’ differ
        when interpolating half-integers (e.g. 0.5, 1.5) in that ‘nearest-up’
        rounds up and ‘nearest’ rounds down.. The default is "cubic".
    interval_mins : int, optional
        Sample time step (minutes). The default is 5.

    Returns
    -------
    1darray
        pmf of storm distribution.

    """
    dist = eval(storm_type)
    # Convert ecdf to pmf (intensity for each time step).
    dist_pmf = [dist[0]] + [dist[i+1] - dist[i] for i in range(len(dist)-1)]
    
    # Construct interpolation function.
    modified_min_list = min_list*dur_hr/24
    func = interpolate.interp1d(modified_min_list, dist_pmf,
                                kind=interpolate_method, assume_sorted=True)
    # Generate new SCS curve.
    gen_min_list = np.arange(0, dur_hr*60+interval_mins, interval_mins)
    pmf = func(gen_min_list)
    pmf = np.array(pmf)/sum(pmf)
    # # Construct interpolation function.
    # dist = eval(storm_type)
    # modified_min_list = min_list*dur_hr/24
    # func = interpolate.interp1d(modified_min_list, dist,
    #                             kind=interpolate_method, assume_sorted=True)
    # # Generate new SCS curve.
    # gen_min_list = np.arange(0, dur_hr*60+interval_mins, interval_mins)
    # x = func(gen_min_list)
    # # Convert ecdf to pmf (intensity for each time step).
    # pmf = [x[0]] + [x[i+1] - x[i] for i in range(len(x)-1)]
    return np.array(pmf)

# def gen_forecast(storm, s, m=1, beta=1, dist="lognorm", size=1, rngen=None):
#     """
#     Sythesize forecast info.

#     Parameters
#     ----------
#     storm : 1darray
#         A storm.
#     s : float
#         Sigma.
#     m : float, optional
#         Median or Mean. The default is 1.
#     beta : float, optional
#         Discount scale. The default is 1.
#     dist : str, optional
#         lognorm or norm. The default is "lognorm".
#     size : int, optional
#         Size. The default is 1.

#     Returns
#     -------
#     tuple
#         fore, np.std(err).

#     """
#     aa = 1/lognorm.rvs(s=s, loc=0, scale=m, size=size, random_state=rngen)
#     fore = []
#     for v in storm:
#         if dist == "lognorm":
#             fore.append(beta * v / lognorm.rvs(s=s, loc=0, scale=m, size=size, random_state=rngen))
#         elif dist == "normal":
#             fore.append(beta * v * norm.rvs(loc=m, scale=s, size=size, random_state=rngen))
#     fore = np.array(fore)
#     err = fore - storm.reshape((-1,1))
#     return fore, np.std(err)
